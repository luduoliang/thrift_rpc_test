// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sessions

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - TaokeID
//  - ScreenName
//  - OpenId
//  - Token
//  - ExpiredAt
//  - RefreshToken
//  - RefreshExpiredAt
//  - IsDefault
//  - CreatedAt
//  - UpdatedAt
type PddSessions struct {
  ID *int32 `thrift:"id,1" db:"id" json:"id,omitempty"`
  TaokeID *int32 `thrift:"taokeID,2" db:"taokeID" json:"taokeID,omitempty"`
  ScreenName *string `thrift:"screenName,3" db:"screenName" json:"screenName,omitempty"`
  OpenId *string `thrift:"openId,4" db:"openId" json:"openId,omitempty"`
  Token *string `thrift:"token,5" db:"token" json:"token,omitempty"`
  ExpiredAt *int64 `thrift:"expiredAt,6" db:"expiredAt" json:"expiredAt,omitempty"`
  RefreshToken *string `thrift:"refreshToken,7" db:"refreshToken" json:"refreshToken,omitempty"`
  RefreshExpiredAt *int64 `thrift:"refreshExpiredAt,8" db:"refreshExpiredAt" json:"refreshExpiredAt,omitempty"`
  IsDefault *int32 `thrift:"isDefault,9" db:"isDefault" json:"isDefault,omitempty"`
  CreatedAt *int64 `thrift:"createdAt,10" db:"createdAt" json:"createdAt,omitempty"`
  UpdatedAt *int64 `thrift:"updatedAt,11" db:"updatedAt" json:"updatedAt,omitempty"`
}

func NewPddSessions() *PddSessions {
  return &PddSessions{}
}

var PddSessions_ID_DEFAULT int32
func (p *PddSessions) GetID() int32 {
  if !p.IsSetID() {
    return PddSessions_ID_DEFAULT
  }
return *p.ID
}
var PddSessions_TaokeID_DEFAULT int32
func (p *PddSessions) GetTaokeID() int32 {
  if !p.IsSetTaokeID() {
    return PddSessions_TaokeID_DEFAULT
  }
return *p.TaokeID
}
var PddSessions_ScreenName_DEFAULT string
func (p *PddSessions) GetScreenName() string {
  if !p.IsSetScreenName() {
    return PddSessions_ScreenName_DEFAULT
  }
return *p.ScreenName
}
var PddSessions_OpenId_DEFAULT string
func (p *PddSessions) GetOpenId() string {
  if !p.IsSetOpenId() {
    return PddSessions_OpenId_DEFAULT
  }
return *p.OpenId
}
var PddSessions_Token_DEFAULT string
func (p *PddSessions) GetToken() string {
  if !p.IsSetToken() {
    return PddSessions_Token_DEFAULT
  }
return *p.Token
}
var PddSessions_ExpiredAt_DEFAULT int64
func (p *PddSessions) GetExpiredAt() int64 {
  if !p.IsSetExpiredAt() {
    return PddSessions_ExpiredAt_DEFAULT
  }
return *p.ExpiredAt
}
var PddSessions_RefreshToken_DEFAULT string
func (p *PddSessions) GetRefreshToken() string {
  if !p.IsSetRefreshToken() {
    return PddSessions_RefreshToken_DEFAULT
  }
return *p.RefreshToken
}
var PddSessions_RefreshExpiredAt_DEFAULT int64
func (p *PddSessions) GetRefreshExpiredAt() int64 {
  if !p.IsSetRefreshExpiredAt() {
    return PddSessions_RefreshExpiredAt_DEFAULT
  }
return *p.RefreshExpiredAt
}
var PddSessions_IsDefault_DEFAULT int32
func (p *PddSessions) GetIsDefault() int32 {
  if !p.IsSetIsDefault() {
    return PddSessions_IsDefault_DEFAULT
  }
return *p.IsDefault
}
var PddSessions_CreatedAt_DEFAULT int64
func (p *PddSessions) GetCreatedAt() int64 {
  if !p.IsSetCreatedAt() {
    return PddSessions_CreatedAt_DEFAULT
  }
return *p.CreatedAt
}
var PddSessions_UpdatedAt_DEFAULT int64
func (p *PddSessions) GetUpdatedAt() int64 {
  if !p.IsSetUpdatedAt() {
    return PddSessions_UpdatedAt_DEFAULT
  }
return *p.UpdatedAt
}
func (p *PddSessions) IsSetID() bool {
  return p.ID != nil
}

func (p *PddSessions) IsSetTaokeID() bool {
  return p.TaokeID != nil
}

func (p *PddSessions) IsSetScreenName() bool {
  return p.ScreenName != nil
}

func (p *PddSessions) IsSetOpenId() bool {
  return p.OpenId != nil
}

func (p *PddSessions) IsSetToken() bool {
  return p.Token != nil
}

func (p *PddSessions) IsSetExpiredAt() bool {
  return p.ExpiredAt != nil
}

func (p *PddSessions) IsSetRefreshToken() bool {
  return p.RefreshToken != nil
}

func (p *PddSessions) IsSetRefreshExpiredAt() bool {
  return p.RefreshExpiredAt != nil
}

func (p *PddSessions) IsSetIsDefault() bool {
  return p.IsDefault != nil
}

func (p *PddSessions) IsSetCreatedAt() bool {
  return p.CreatedAt != nil
}

func (p *PddSessions) IsSetUpdatedAt() bool {
  return p.UpdatedAt != nil
}

func (p *PddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PddSessions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *PddSessions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TaokeID = &v
}
  return nil
}

func (p *PddSessions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ScreenName = &v
}
  return nil
}

func (p *PddSessions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OpenId = &v
}
  return nil
}

func (p *PddSessions)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Token = &v
}
  return nil
}

func (p *PddSessions)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExpiredAt = &v
}
  return nil
}

func (p *PddSessions)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RefreshToken = &v
}
  return nil
}

func (p *PddSessions)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RefreshExpiredAt = &v
}
  return nil
}

func (p *PddSessions)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsDefault = &v
}
  return nil
}

func (p *PddSessions)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = &v
}
  return nil
}

func (p *PddSessions)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = &v
}
  return nil
}

func (p *PddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaokeID() {
    if err := oprot.WriteFieldBegin("taokeID", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taokeID: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TaokeID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taokeID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taokeID: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetScreenName() {
    if err := oprot.WriteFieldBegin("screenName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:screenName: ", p), err) }
    if err := oprot.WriteString(string(*p.ScreenName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.screenName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:screenName: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOpenId() {
    if err := oprot.WriteFieldBegin("openId", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:openId: ", p), err) }
    if err := oprot.WriteString(string(*p.OpenId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.openId (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:openId: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:token: ", p), err) }
    if err := oprot.WriteString(string(*p.Token)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.token (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:token: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetExpiredAt() {
    if err := oprot.WriteFieldBegin("expiredAt", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:expiredAt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ExpiredAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expiredAt (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:expiredAt: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetRefreshToken() {
    if err := oprot.WriteFieldBegin("refreshToken", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:refreshToken: ", p), err) }
    if err := oprot.WriteString(string(*p.RefreshToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refreshToken (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:refreshToken: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetRefreshExpiredAt() {
    if err := oprot.WriteFieldBegin("refreshExpiredAt", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:refreshExpiredAt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RefreshExpiredAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refreshExpiredAt (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:refreshExpiredAt: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsDefault() {
    if err := oprot.WriteFieldBegin("isDefault", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isDefault: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IsDefault)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isDefault (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isDefault: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedAt() {
    if err := oprot.WriteFieldBegin("createdAt", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createdAt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdAt (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createdAt: ", p), err) }
  }
  return err
}

func (p *PddSessions) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdatedAt() {
    if err := oprot.WriteFieldBegin("updatedAt", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updatedAt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UpdatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updatedAt (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updatedAt: ", p), err) }
  }
  return err
}

func (p *PddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PddSessions(%+v)", *p)
}

// Attributes:
//  - PddSessions
type ResponseGetPddSessionsInfo struct {
  PddSessions *PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
}

func NewResponseGetPddSessionsInfo() *ResponseGetPddSessionsInfo {
  return &ResponseGetPddSessionsInfo{}
}

var ResponseGetPddSessionsInfo_PddSessions_DEFAULT *PddSessions
func (p *ResponseGetPddSessionsInfo) GetPddSessions() *PddSessions {
  if !p.IsSetPddSessions() {
    return ResponseGetPddSessionsInfo_PddSessions_DEFAULT
  }
return p.PddSessions
}
func (p *ResponseGetPddSessionsInfo) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *ResponseGetPddSessionsInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseGetPddSessionsInfo)  ReadField1(iprot thrift.TProtocol) error {
  p.PddSessions = &PddSessions{}
  if err := p.PddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PddSessions), err)
  }
  return nil
}

func (p *ResponseGetPddSessionsInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseGetPddSessionsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseGetPddSessionsInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := p.PddSessions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PddSessions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *ResponseGetPddSessionsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseGetPddSessionsInfo(%+v)", *p)
}

// Attributes:
//  - ID
type RequestGetPddSessionsInfo struct {
  ID *int32 `thrift:"id,1" db:"id" json:"id,omitempty"`
}

func NewRequestGetPddSessionsInfo() *RequestGetPddSessionsInfo {
  return &RequestGetPddSessionsInfo{}
}

var RequestGetPddSessionsInfo_ID_DEFAULT int32
func (p *RequestGetPddSessionsInfo) GetID() int32 {
  if !p.IsSetID() {
    return RequestGetPddSessionsInfo_ID_DEFAULT
  }
return *p.ID
}
func (p *RequestGetPddSessionsInfo) IsSetID() bool {
  return p.ID != nil
}

func (p *RequestGetPddSessionsInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestGetPddSessionsInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *RequestGetPddSessionsInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestGetPddSessionsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestGetPddSessionsInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *RequestGetPddSessionsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestGetPddSessionsInfo(%+v)", *p)
}

// Attributes:
//  - PddSessions
//  - Total
type ResponseGetPddSessionsList struct {
  PddSessions []*PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
  Total *int32 `thrift:"total,2" db:"total" json:"total,omitempty"`
}

func NewResponseGetPddSessionsList() *ResponseGetPddSessionsList {
  return &ResponseGetPddSessionsList{}
}

var ResponseGetPddSessionsList_PddSessions_DEFAULT []*PddSessions

func (p *ResponseGetPddSessionsList) GetPddSessions() []*PddSessions {
  return p.PddSessions
}
var ResponseGetPddSessionsList_Total_DEFAULT int32
func (p *ResponseGetPddSessionsList) GetTotal() int32 {
  if !p.IsSetTotal() {
    return ResponseGetPddSessionsList_Total_DEFAULT
  }
return *p.Total
}
func (p *ResponseGetPddSessionsList) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *ResponseGetPddSessionsList) IsSetTotal() bool {
  return p.Total != nil
}

func (p *ResponseGetPddSessionsList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseGetPddSessionsList)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PddSessions, 0, size)
  p.PddSessions =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &PddSessions{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.PddSessions = append(p.PddSessions, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResponseGetPddSessionsList)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Total = &v
}
  return nil
}

func (p *ResponseGetPddSessionsList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseGetPddSessionsList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseGetPddSessionsList) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PddSessions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PddSessions {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *ResponseGetPddSessionsList) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTotal() {
    if err := oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Total)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err) }
  }
  return err
}

func (p *ResponseGetPddSessionsList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseGetPddSessionsList(%+v)", *p)
}

// Attributes:
//  - Page
//  - PerPage
type RequestGetPddSessionsList struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  PerPage int32 `thrift:"per_page,2" db:"per_page" json:"per_page"`
}

func NewRequestGetPddSessionsList() *RequestGetPddSessionsList {
  return &RequestGetPddSessionsList{
Page: 1,

PerPage: 10,
}
}

var RequestGetPddSessionsList_Page_DEFAULT int32 = 1

func (p *RequestGetPddSessionsList) GetPage() int32 {
  return p.Page
}
var RequestGetPddSessionsList_PerPage_DEFAULT int32 = 10

func (p *RequestGetPddSessionsList) GetPerPage() int32 {
  return p.PerPage
}
func (p *RequestGetPddSessionsList) IsSetPage() bool {
  return p.Page != RequestGetPddSessionsList_Page_DEFAULT
}

func (p *RequestGetPddSessionsList) IsSetPerPage() bool {
  return p.PerPage != RequestGetPddSessionsList_PerPage_DEFAULT
}

func (p *RequestGetPddSessionsList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestGetPddSessionsList)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *RequestGetPddSessionsList)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PerPage = v
}
  return nil
}

func (p *RequestGetPddSessionsList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestGetPddSessionsList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestGetPddSessionsList) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPage() {
    if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
    if err := oprot.WriteI32(int32(p.Page)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  }
  return err
}

func (p *RequestGetPddSessionsList) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPerPage() {
    if err := oprot.WriteFieldBegin("per_page", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:per_page: ", p), err) }
    if err := oprot.WriteI32(int32(p.PerPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.per_page (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:per_page: ", p), err) }
  }
  return err
}

func (p *RequestGetPddSessionsList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestGetPddSessionsList(%+v)", *p)
}

// Attributes:
//  - PddSessions
type RequestAddPddSessions struct {
  PddSessions *PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
}

func NewRequestAddPddSessions() *RequestAddPddSessions {
  return &RequestAddPddSessions{}
}

var RequestAddPddSessions_PddSessions_DEFAULT *PddSessions
func (p *RequestAddPddSessions) GetPddSessions() *PddSessions {
  if !p.IsSetPddSessions() {
    return RequestAddPddSessions_PddSessions_DEFAULT
  }
return p.PddSessions
}
func (p *RequestAddPddSessions) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *RequestAddPddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestAddPddSessions)  ReadField1(iprot thrift.TProtocol) error {
  p.PddSessions = &PddSessions{}
  if err := p.PddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PddSessions), err)
  }
  return nil
}

func (p *RequestAddPddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestAddPddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestAddPddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := p.PddSessions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PddSessions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *RequestAddPddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestAddPddSessions(%+v)", *p)
}

// Attributes:
//  - PddSessions
type ResponseAddPddSessions struct {
  PddSessions *PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
}

func NewResponseAddPddSessions() *ResponseAddPddSessions {
  return &ResponseAddPddSessions{}
}

var ResponseAddPddSessions_PddSessions_DEFAULT *PddSessions
func (p *ResponseAddPddSessions) GetPddSessions() *PddSessions {
  if !p.IsSetPddSessions() {
    return ResponseAddPddSessions_PddSessions_DEFAULT
  }
return p.PddSessions
}
func (p *ResponseAddPddSessions) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *ResponseAddPddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseAddPddSessions)  ReadField1(iprot thrift.TProtocol) error {
  p.PddSessions = &PddSessions{}
  if err := p.PddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PddSessions), err)
  }
  return nil
}

func (p *ResponseAddPddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseAddPddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseAddPddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := p.PddSessions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PddSessions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *ResponseAddPddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseAddPddSessions(%+v)", *p)
}

// Attributes:
//  - PddSessions
type RequestUpdatePddSessions struct {
  PddSessions *PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
}

func NewRequestUpdatePddSessions() *RequestUpdatePddSessions {
  return &RequestUpdatePddSessions{}
}

var RequestUpdatePddSessions_PddSessions_DEFAULT *PddSessions
func (p *RequestUpdatePddSessions) GetPddSessions() *PddSessions {
  if !p.IsSetPddSessions() {
    return RequestUpdatePddSessions_PddSessions_DEFAULT
  }
return p.PddSessions
}
func (p *RequestUpdatePddSessions) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *RequestUpdatePddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestUpdatePddSessions)  ReadField1(iprot thrift.TProtocol) error {
  p.PddSessions = &PddSessions{}
  if err := p.PddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PddSessions), err)
  }
  return nil
}

func (p *RequestUpdatePddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestUpdatePddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestUpdatePddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := p.PddSessions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PddSessions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *RequestUpdatePddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestUpdatePddSessions(%+v)", *p)
}

// Attributes:
//  - PddSessions
type ResponseUpdatePddSessions struct {
  PddSessions *PddSessions `thrift:"pddSessions,1" db:"pddSessions" json:"pddSessions,omitempty"`
}

func NewResponseUpdatePddSessions() *ResponseUpdatePddSessions {
  return &ResponseUpdatePddSessions{}
}

var ResponseUpdatePddSessions_PddSessions_DEFAULT *PddSessions
func (p *ResponseUpdatePddSessions) GetPddSessions() *PddSessions {
  if !p.IsSetPddSessions() {
    return ResponseUpdatePddSessions_PddSessions_DEFAULT
  }
return p.PddSessions
}
func (p *ResponseUpdatePddSessions) IsSetPddSessions() bool {
  return p.PddSessions != nil
}

func (p *ResponseUpdatePddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseUpdatePddSessions)  ReadField1(iprot thrift.TProtocol) error {
  p.PddSessions = &PddSessions{}
  if err := p.PddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PddSessions), err)
  }
  return nil
}

func (p *ResponseUpdatePddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseUpdatePddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseUpdatePddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPddSessions() {
    if err := oprot.WriteFieldBegin("pddSessions", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pddSessions: ", p), err) }
    if err := p.PddSessions.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PddSessions), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pddSessions: ", p), err) }
  }
  return err
}

func (p *ResponseUpdatePddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseUpdatePddSessions(%+v)", *p)
}

// Attributes:
//  - ID
type RequestDeletePddSessions struct {
  ID *int32 `thrift:"id,1" db:"id" json:"id,omitempty"`
}

func NewRequestDeletePddSessions() *RequestDeletePddSessions {
  return &RequestDeletePddSessions{}
}

var RequestDeletePddSessions_ID_DEFAULT int32
func (p *RequestDeletePddSessions) GetID() int32 {
  if !p.IsSetID() {
    return RequestDeletePddSessions_ID_DEFAULT
  }
return *p.ID
}
func (p *RequestDeletePddSessions) IsSetID() bool {
  return p.ID != nil
}

func (p *RequestDeletePddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestDeletePddSessions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *RequestDeletePddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestDeletePddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestDeletePddSessions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *RequestDeletePddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestDeletePddSessions(%+v)", *p)
}

type ResponseDeletePddSessions struct {
}

func NewResponseDeletePddSessions() *ResponseDeletePddSessions {
  return &ResponseDeletePddSessions{}
}

func (p *ResponseDeletePddSessions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseDeletePddSessions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseDeletePddSessions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseDeletePddSessions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseDeletePddSessions(%+v)", *p)
}

type Waiter interface {
  // Parameters:
  //  - RequestAddPddSessions
  AddPddSessions(ctx context.Context, requestAddPddSessions *RequestAddPddSessions) (r *ResponseAddPddSessions, err error)
  // Parameters:
  //  - RequestUpdatePddSessions
  UpdatePddSessions(ctx context.Context, requestUpdatePddSessions *RequestUpdatePddSessions) (r *ResponseUpdatePddSessions, err error)
  // Parameters:
  //  - RequestDeletePddSessions
  DeletePddSessions(ctx context.Context, requestDeletePddSessions *RequestDeletePddSessions) (r *ResponseDeletePddSessions, err error)
  // Parameters:
  //  - RequestGetPddSessionsInfo
  GetPddSessionsInfo(ctx context.Context, requestGetPddSessionsInfo *RequestGetPddSessionsInfo) (r *ResponseGetPddSessionsInfo, err error)
  // Parameters:
  //  - RequestGetPddSessionsList
  GetPddSessionsList(ctx context.Context, requestGetPddSessionsList *RequestGetPddSessionsList) (r *ResponseGetPddSessionsList, err error)
}

type WaiterClient struct {
  c thrift.TClient
}

func NewWaiterClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WaiterClient {
  return &WaiterClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewWaiterClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WaiterClient {
  return &WaiterClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewWaiterClient(c thrift.TClient) *WaiterClient {
  return &WaiterClient{
    c: c,
  }
}

func (p *WaiterClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RequestAddPddSessions
func (p *WaiterClient) AddPddSessions(ctx context.Context, requestAddPddSessions *RequestAddPddSessions) (r *ResponseAddPddSessions, err error) {
  var _args1 WaiterAddPddSessionsArgs
  _args1.RequestAddPddSessions = requestAddPddSessions
  var _result2 WaiterAddPddSessionsResult
  if err = p.Client_().Call(ctx, "AddPddSessions", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - RequestUpdatePddSessions
func (p *WaiterClient) UpdatePddSessions(ctx context.Context, requestUpdatePddSessions *RequestUpdatePddSessions) (r *ResponseUpdatePddSessions, err error) {
  var _args3 WaiterUpdatePddSessionsArgs
  _args3.RequestUpdatePddSessions = requestUpdatePddSessions
  var _result4 WaiterUpdatePddSessionsResult
  if err = p.Client_().Call(ctx, "UpdatePddSessions", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - RequestDeletePddSessions
func (p *WaiterClient) DeletePddSessions(ctx context.Context, requestDeletePddSessions *RequestDeletePddSessions) (r *ResponseDeletePddSessions, err error) {
  var _args5 WaiterDeletePddSessionsArgs
  _args5.RequestDeletePddSessions = requestDeletePddSessions
  var _result6 WaiterDeletePddSessionsResult
  if err = p.Client_().Call(ctx, "DeletePddSessions", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - RequestGetPddSessionsInfo
func (p *WaiterClient) GetPddSessionsInfo(ctx context.Context, requestGetPddSessionsInfo *RequestGetPddSessionsInfo) (r *ResponseGetPddSessionsInfo, err error) {
  var _args7 WaiterGetPddSessionsInfoArgs
  _args7.RequestGetPddSessionsInfo = requestGetPddSessionsInfo
  var _result8 WaiterGetPddSessionsInfoResult
  if err = p.Client_().Call(ctx, "GetPddSessionsInfo", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - RequestGetPddSessionsList
func (p *WaiterClient) GetPddSessionsList(ctx context.Context, requestGetPddSessionsList *RequestGetPddSessionsList) (r *ResponseGetPddSessionsList, err error) {
  var _args9 WaiterGetPddSessionsListArgs
  _args9.RequestGetPddSessionsList = requestGetPddSessionsList
  var _result10 WaiterGetPddSessionsListResult
  if err = p.Client_().Call(ctx, "GetPddSessionsList", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

type WaiterProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Waiter
}

func (p *WaiterProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WaiterProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WaiterProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWaiterProcessor(handler Waiter) *WaiterProcessor {

  self11 := &WaiterProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["AddPddSessions"] = &waiterProcessorAddPddSessions{handler:handler}
  self11.processorMap["UpdatePddSessions"] = &waiterProcessorUpdatePddSessions{handler:handler}
  self11.processorMap["DeletePddSessions"] = &waiterProcessorDeletePddSessions{handler:handler}
  self11.processorMap["GetPddSessionsInfo"] = &waiterProcessorGetPddSessionsInfo{handler:handler}
  self11.processorMap["GetPddSessionsList"] = &waiterProcessorGetPddSessionsList{handler:handler}
return self11
}

func (p *WaiterProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x12

}

type waiterProcessorAddPddSessions struct {
  handler Waiter
}

func (p *waiterProcessorAddPddSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaiterAddPddSessionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddPddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WaiterAddPddSessionsResult{}
var retval *ResponseAddPddSessions
  var err2 error
  if retval, err2 = p.handler.AddPddSessions(ctx, args.RequestAddPddSessions); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddPddSessions: " + err2.Error())
    oprot.WriteMessageBegin("AddPddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AddPddSessions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type waiterProcessorUpdatePddSessions struct {
  handler Waiter
}

func (p *waiterProcessorUpdatePddSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaiterUpdatePddSessionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdatePddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WaiterUpdatePddSessionsResult{}
var retval *ResponseUpdatePddSessions
  var err2 error
  if retval, err2 = p.handler.UpdatePddSessions(ctx, args.RequestUpdatePddSessions); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePddSessions: " + err2.Error())
    oprot.WriteMessageBegin("UpdatePddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("UpdatePddSessions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type waiterProcessorDeletePddSessions struct {
  handler Waiter
}

func (p *waiterProcessorDeletePddSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaiterDeletePddSessionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeletePddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WaiterDeletePddSessionsResult{}
var retval *ResponseDeletePddSessions
  var err2 error
  if retval, err2 = p.handler.DeletePddSessions(ctx, args.RequestDeletePddSessions); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePddSessions: " + err2.Error())
    oprot.WriteMessageBegin("DeletePddSessions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DeletePddSessions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type waiterProcessorGetPddSessionsInfo struct {
  handler Waiter
}

func (p *waiterProcessorGetPddSessionsInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaiterGetPddSessionsInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPddSessionsInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WaiterGetPddSessionsInfoResult{}
var retval *ResponseGetPddSessionsInfo
  var err2 error
  if retval, err2 = p.handler.GetPddSessionsInfo(ctx, args.RequestGetPddSessionsInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPddSessionsInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetPddSessionsInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPddSessionsInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type waiterProcessorGetPddSessionsList struct {
  handler Waiter
}

func (p *waiterProcessorGetPddSessionsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaiterGetPddSessionsListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPddSessionsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WaiterGetPddSessionsListResult{}
var retval *ResponseGetPddSessionsList
  var err2 error
  if retval, err2 = p.handler.GetPddSessionsList(ctx, args.RequestGetPddSessionsList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPddSessionsList: " + err2.Error())
    oprot.WriteMessageBegin("GetPddSessionsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPddSessionsList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestAddPddSessions
type WaiterAddPddSessionsArgs struct {
  RequestAddPddSessions *RequestAddPddSessions `thrift:"requestAddPddSessions,1" db:"requestAddPddSessions" json:"requestAddPddSessions"`
}

func NewWaiterAddPddSessionsArgs() *WaiterAddPddSessionsArgs {
  return &WaiterAddPddSessionsArgs{}
}

var WaiterAddPddSessionsArgs_RequestAddPddSessions_DEFAULT *RequestAddPddSessions
func (p *WaiterAddPddSessionsArgs) GetRequestAddPddSessions() *RequestAddPddSessions {
  if !p.IsSetRequestAddPddSessions() {
    return WaiterAddPddSessionsArgs_RequestAddPddSessions_DEFAULT
  }
return p.RequestAddPddSessions
}
func (p *WaiterAddPddSessionsArgs) IsSetRequestAddPddSessions() bool {
  return p.RequestAddPddSessions != nil
}

func (p *WaiterAddPddSessionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterAddPddSessionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestAddPddSessions = &RequestAddPddSessions{}
  if err := p.RequestAddPddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestAddPddSessions), err)
  }
  return nil
}

func (p *WaiterAddPddSessionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddPddSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterAddPddSessionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestAddPddSessions", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestAddPddSessions: ", p), err) }
  if err := p.RequestAddPddSessions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestAddPddSessions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestAddPddSessions: ", p), err) }
  return err
}

func (p *WaiterAddPddSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterAddPddSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaiterAddPddSessionsResult struct {
  Success *ResponseAddPddSessions `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaiterAddPddSessionsResult() *WaiterAddPddSessionsResult {
  return &WaiterAddPddSessionsResult{}
}

var WaiterAddPddSessionsResult_Success_DEFAULT *ResponseAddPddSessions
func (p *WaiterAddPddSessionsResult) GetSuccess() *ResponseAddPddSessions {
  if !p.IsSetSuccess() {
    return WaiterAddPddSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *WaiterAddPddSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaiterAddPddSessionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterAddPddSessionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponseAddPddSessions{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WaiterAddPddSessionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddPddSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterAddPddSessionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaiterAddPddSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterAddPddSessionsResult(%+v)", *p)
}

// Attributes:
//  - RequestUpdatePddSessions
type WaiterUpdatePddSessionsArgs struct {
  RequestUpdatePddSessions *RequestUpdatePddSessions `thrift:"requestUpdatePddSessions,1" db:"requestUpdatePddSessions" json:"requestUpdatePddSessions"`
}

func NewWaiterUpdatePddSessionsArgs() *WaiterUpdatePddSessionsArgs {
  return &WaiterUpdatePddSessionsArgs{}
}

var WaiterUpdatePddSessionsArgs_RequestUpdatePddSessions_DEFAULT *RequestUpdatePddSessions
func (p *WaiterUpdatePddSessionsArgs) GetRequestUpdatePddSessions() *RequestUpdatePddSessions {
  if !p.IsSetRequestUpdatePddSessions() {
    return WaiterUpdatePddSessionsArgs_RequestUpdatePddSessions_DEFAULT
  }
return p.RequestUpdatePddSessions
}
func (p *WaiterUpdatePddSessionsArgs) IsSetRequestUpdatePddSessions() bool {
  return p.RequestUpdatePddSessions != nil
}

func (p *WaiterUpdatePddSessionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterUpdatePddSessionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestUpdatePddSessions = &RequestUpdatePddSessions{}
  if err := p.RequestUpdatePddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestUpdatePddSessions), err)
  }
  return nil
}

func (p *WaiterUpdatePddSessionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePddSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterUpdatePddSessionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestUpdatePddSessions", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestUpdatePddSessions: ", p), err) }
  if err := p.RequestUpdatePddSessions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestUpdatePddSessions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestUpdatePddSessions: ", p), err) }
  return err
}

func (p *WaiterUpdatePddSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterUpdatePddSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaiterUpdatePddSessionsResult struct {
  Success *ResponseUpdatePddSessions `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaiterUpdatePddSessionsResult() *WaiterUpdatePddSessionsResult {
  return &WaiterUpdatePddSessionsResult{}
}

var WaiterUpdatePddSessionsResult_Success_DEFAULT *ResponseUpdatePddSessions
func (p *WaiterUpdatePddSessionsResult) GetSuccess() *ResponseUpdatePddSessions {
  if !p.IsSetSuccess() {
    return WaiterUpdatePddSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *WaiterUpdatePddSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaiterUpdatePddSessionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterUpdatePddSessionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponseUpdatePddSessions{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WaiterUpdatePddSessionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePddSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterUpdatePddSessionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaiterUpdatePddSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterUpdatePddSessionsResult(%+v)", *p)
}

// Attributes:
//  - RequestDeletePddSessions
type WaiterDeletePddSessionsArgs struct {
  RequestDeletePddSessions *RequestDeletePddSessions `thrift:"requestDeletePddSessions,1" db:"requestDeletePddSessions" json:"requestDeletePddSessions"`
}

func NewWaiterDeletePddSessionsArgs() *WaiterDeletePddSessionsArgs {
  return &WaiterDeletePddSessionsArgs{}
}

var WaiterDeletePddSessionsArgs_RequestDeletePddSessions_DEFAULT *RequestDeletePddSessions
func (p *WaiterDeletePddSessionsArgs) GetRequestDeletePddSessions() *RequestDeletePddSessions {
  if !p.IsSetRequestDeletePddSessions() {
    return WaiterDeletePddSessionsArgs_RequestDeletePddSessions_DEFAULT
  }
return p.RequestDeletePddSessions
}
func (p *WaiterDeletePddSessionsArgs) IsSetRequestDeletePddSessions() bool {
  return p.RequestDeletePddSessions != nil
}

func (p *WaiterDeletePddSessionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterDeletePddSessionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestDeletePddSessions = &RequestDeletePddSessions{}
  if err := p.RequestDeletePddSessions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestDeletePddSessions), err)
  }
  return nil
}

func (p *WaiterDeletePddSessionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeletePddSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterDeletePddSessionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestDeletePddSessions", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestDeletePddSessions: ", p), err) }
  if err := p.RequestDeletePddSessions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestDeletePddSessions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestDeletePddSessions: ", p), err) }
  return err
}

func (p *WaiterDeletePddSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterDeletePddSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaiterDeletePddSessionsResult struct {
  Success *ResponseDeletePddSessions `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaiterDeletePddSessionsResult() *WaiterDeletePddSessionsResult {
  return &WaiterDeletePddSessionsResult{}
}

var WaiterDeletePddSessionsResult_Success_DEFAULT *ResponseDeletePddSessions
func (p *WaiterDeletePddSessionsResult) GetSuccess() *ResponseDeletePddSessions {
  if !p.IsSetSuccess() {
    return WaiterDeletePddSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *WaiterDeletePddSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaiterDeletePddSessionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterDeletePddSessionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponseDeletePddSessions{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WaiterDeletePddSessionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeletePddSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterDeletePddSessionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaiterDeletePddSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterDeletePddSessionsResult(%+v)", *p)
}

// Attributes:
//  - RequestGetPddSessionsInfo
type WaiterGetPddSessionsInfoArgs struct {
  RequestGetPddSessionsInfo *RequestGetPddSessionsInfo `thrift:"requestGetPddSessionsInfo,1" db:"requestGetPddSessionsInfo" json:"requestGetPddSessionsInfo"`
}

func NewWaiterGetPddSessionsInfoArgs() *WaiterGetPddSessionsInfoArgs {
  return &WaiterGetPddSessionsInfoArgs{}
}

var WaiterGetPddSessionsInfoArgs_RequestGetPddSessionsInfo_DEFAULT *RequestGetPddSessionsInfo
func (p *WaiterGetPddSessionsInfoArgs) GetRequestGetPddSessionsInfo() *RequestGetPddSessionsInfo {
  if !p.IsSetRequestGetPddSessionsInfo() {
    return WaiterGetPddSessionsInfoArgs_RequestGetPddSessionsInfo_DEFAULT
  }
return p.RequestGetPddSessionsInfo
}
func (p *WaiterGetPddSessionsInfoArgs) IsSetRequestGetPddSessionsInfo() bool {
  return p.RequestGetPddSessionsInfo != nil
}

func (p *WaiterGetPddSessionsInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestGetPddSessionsInfo = &RequestGetPddSessionsInfo{}
  if err := p.RequestGetPddSessionsInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestGetPddSessionsInfo), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPddSessionsInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterGetPddSessionsInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestGetPddSessionsInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestGetPddSessionsInfo: ", p), err) }
  if err := p.RequestGetPddSessionsInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestGetPddSessionsInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestGetPddSessionsInfo: ", p), err) }
  return err
}

func (p *WaiterGetPddSessionsInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterGetPddSessionsInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaiterGetPddSessionsInfoResult struct {
  Success *ResponseGetPddSessionsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaiterGetPddSessionsInfoResult() *WaiterGetPddSessionsInfoResult {
  return &WaiterGetPddSessionsInfoResult{}
}

var WaiterGetPddSessionsInfoResult_Success_DEFAULT *ResponseGetPddSessionsInfo
func (p *WaiterGetPddSessionsInfoResult) GetSuccess() *ResponseGetPddSessionsInfo {
  if !p.IsSetSuccess() {
    return WaiterGetPddSessionsInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *WaiterGetPddSessionsInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaiterGetPddSessionsInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponseGetPddSessionsInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPddSessionsInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterGetPddSessionsInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaiterGetPddSessionsInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterGetPddSessionsInfoResult(%+v)", *p)
}

// Attributes:
//  - RequestGetPddSessionsList
type WaiterGetPddSessionsListArgs struct {
  RequestGetPddSessionsList *RequestGetPddSessionsList `thrift:"requestGetPddSessionsList,1" db:"requestGetPddSessionsList" json:"requestGetPddSessionsList"`
}

func NewWaiterGetPddSessionsListArgs() *WaiterGetPddSessionsListArgs {
  return &WaiterGetPddSessionsListArgs{}
}

var WaiterGetPddSessionsListArgs_RequestGetPddSessionsList_DEFAULT *RequestGetPddSessionsList
func (p *WaiterGetPddSessionsListArgs) GetRequestGetPddSessionsList() *RequestGetPddSessionsList {
  if !p.IsSetRequestGetPddSessionsList() {
    return WaiterGetPddSessionsListArgs_RequestGetPddSessionsList_DEFAULT
  }
return p.RequestGetPddSessionsList
}
func (p *WaiterGetPddSessionsListArgs) IsSetRequestGetPddSessionsList() bool {
  return p.RequestGetPddSessionsList != nil
}

func (p *WaiterGetPddSessionsListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestGetPddSessionsList = &RequestGetPddSessionsList{
  Page: 1,

  PerPage: 10,
}
  if err := p.RequestGetPddSessionsList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestGetPddSessionsList), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPddSessionsList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterGetPddSessionsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestGetPddSessionsList", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestGetPddSessionsList: ", p), err) }
  if err := p.RequestGetPddSessionsList.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestGetPddSessionsList), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestGetPddSessionsList: ", p), err) }
  return err
}

func (p *WaiterGetPddSessionsListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterGetPddSessionsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaiterGetPddSessionsListResult struct {
  Success *ResponseGetPddSessionsList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaiterGetPddSessionsListResult() *WaiterGetPddSessionsListResult {
  return &WaiterGetPddSessionsListResult{}
}

var WaiterGetPddSessionsListResult_Success_DEFAULT *ResponseGetPddSessionsList
func (p *WaiterGetPddSessionsListResult) GetSuccess() *ResponseGetPddSessionsList {
  if !p.IsSetSuccess() {
    return WaiterGetPddSessionsListResult_Success_DEFAULT
  }
return p.Success
}
func (p *WaiterGetPddSessionsListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaiterGetPddSessionsListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponseGetPddSessionsList{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WaiterGetPddSessionsListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPddSessionsList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaiterGetPddSessionsListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaiterGetPddSessionsListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaiterGetPddSessionsListResult(%+v)", *p)
}


